-연습문제 1번
-->다음과 같이 동작하는 하나의 부모 프로세스아 하나의 자식 프로세스를 구현하시오. 
부모 프로세스는 사용자로부터 양의 정수값을 하나를 입력받는다. 그리고 fork를 사용하여 자식 프로세스를 
생성한 후 부모 프로세스에서는 1부터 해당 정수까지의 합을 계산하여 출력하고 자식 프로세스에서는 1부터 
해당 정수까지의 곱을 계산하여 출력하시오.

  1 #include <stdio.h>
  2 #include <unistd.h>
  3 #include <sys/types.h>
  4 
  5 int main(void)
  6 {
  7         pid_t pid;
  8         int num, i, sum, mul;
  9 
 10         printf("Input a number please : ");
 11         scanf("%d", &num);
 12 
 13         pid  = fork();
 14 
 15         if(pid > 0)
 16         {
 17                 for(i = 1, sum  = 0; i <= num; i++)
 18                 sum = sum + i;
 19                 printf("Sum is %d\n", sum);
 20         }
 21 
 22         else
 23         {
 24                 for(i = 1, mul = 1; i <= num; i++)
 25                 mul  = mul * i;
 26                 printf("mul is %d\n", mul);
 27         }
 28 
 29         return 0;
 30 }


-연습문제 2번
-->다음 프로그램에 대해 설명하고 수행결과가 무엇인지 기술하시오.

  1 #include <stdio.h>
  2 #include <sys/types.h>
  3 
  4 int main(void)
  5 {
  6         pid_t pid1, pid2;
  7         int num = 0;
  8 
  9         pid1 = fork();
 10         if(pid1 > 0)
 11         {
 12                 pid2 = fork();
 13         }
 14 
 15         if(pid1 > 0 && pid2 > 0)
 16         {
 17                 sleep(1);
 18                 num++;
 19                 printf("%d\n", num);
 20         }
 21 
 22         else if(pid1 == 0 || pid2 == 0)
 23         {
 24                 num = num + 2;
 25                 printf("%d\n", num);
 26         }
 27 
 28         return 0;
 29 }

-프로그램에 대한 설명
: 1. 부모 프로세스가 두 개의 자식 프로세스를 생성한다.
  2. 부모 프로세스는 
     pid1 > 0 && pid2 > 0 
     1초를 쉰 뒤에 즉 sleep 후에 num+;을 수행하여 1을 출력하고 
     두개의 자식 프로세스는 
     pid1 == 0 || pid2 == 0
     num = num + 2;를 수행하여 2를 출력한다.
  3. 자식프로세스를 만드는데 시간이 너무 많이 들지 않는다면 2 2 1와 같은 순서대로 출력될 것이다. 

-수행결과 
: 2
  2
  1


-연습문제 3번
-->리눅스 명령어인 head는 파라미터로 열거된 파일들의 내용을 출력하는 기능을 한다. 이 명령어의 
매뉴얼을 통해 그 기능을 숙지하시오. 
'head a.txt b.txt c.txt'라는 리눅스 명령어를 수행하는 프로그래램을 작성하되 execl, execlp, execv,
execvp 함수를 사용하는 프로그램을 각각 작성하시오. 

-execl 함수
: 1 #include <stdio.h>
  2 int main(void)
  3 {
  4         char *arg[] = {"head", "a.txt", "b.txt", "c.txt", (char *)0};
  5 
  6         printf(".txt file is\n");
  7         execl("/usr/bin/head", "head", "a.txt", "b.txt", "c.txt", (char *)0);
  8 
  9         return 0;
 10 }

-execlp 함수
: 1 #include <stdio.h>
  2 int main(void)
  3 {
  4         char *arg[] = {"head", "a.txt", "b.txt", "c.txt", (char *)0};
  5 
  6         printf(".txt file is\n");
  7         execlp("head","head", "a.txt", "b.txt", "c.txt", (char *)0);
  8 
  9         return 0;
 10 }

-execv 함수
: 1 #include <stdio.h>
  2 int main(void)
  3 {
  4         char *arg[] = {"head", "a.txt", "b.txt", "c.txt", (char *)0};
  5 
  6         printf(".txt file is\n");
  7         execv("/usr/bin/head", arg);
  8 
  9         return 0;
 10 }

-execvp 함수
: 1 #include <stdio.h>
  2 int main(void)
  3 {
  4         char *arg[] = {"head", "a.txt", "b.txt", "c.txt", (char *)0};
  5 
  6         printf(".txt file is\n");
  7         execvp("head", arg);
  8 
  9         return 0;
 10 }


-연습문제 4번
-->리눅스 명령어인 wc는 특정 파일의 line, word, character 수를 출력하는 명령어이며 여러 개의 
파일이 올 경우 각각의 파일에 대한 값을 출력해 준다. 여기서는 여러개의 파일이 올 경우 각 파일에 
대해 별도의 프로세스가 처리할 수 있도록 프로그램을 작성해 보자.
다음과 같은 입력이 들어올 경우 fork와 exec 계열 함수를 적절히 사용하여 각각의 파일에 대해 
wc 명령어를 수행할 수 있도록 프로그램을 작성하시오.

$ mywc a.txt b.txt c.txt
   14	24   193  a.txt
   27	49   274  b.txt
   11	20   115  c.txt

  1 #include <stdio.h>
  2 #include <unistd.h>
  3 #include <string.h>
  4 #include <stdlib.h>
  5 #include <sys/types.h>
  6 
  7 int main(int argc, char *argv[])
  8 {
  9         pid_t pid;
 10         char filename[64];
 11         int n;
 12 
 13         for(n = 1; n < argc; n++)
 14         {
 15                 strcpy(filename, argv[n]);
 16                 printf("Run \"wc %s\"\n", filename);
 17                 pid = fork();
 18                 if(pid == 0)
 19                 {
 20                         execlp("wc", "wc", filename, (char *)0);
 21                         exit(1);
 22                 }
 23         }
 24         return 0;
 25 }


-연습문제 5번
-->전역변수로 파일 포인터를 선언한 후 임의의 파일을 열어 내용을 출력하시오. 마지막으로 프로그램이 
종료되기 전에 파일을 닫아야 하는데, 이 파일을 닫는 작업은 atexit를 사용하여 등록한 함수에서 수행하도록 하시오.

-syd.txt 내용
: Hello

  1 #include <stdio.h>
  2 #include <unistd.h>
  3 #include <fcntl.h>
  4 
  5 int files;
  6 void exit(void);
  7 
  8 void exit(void)
  9 {
 10         printf("Close files\n");
 11         close(files);
 12 }
 13 
 14 
 15 int main(void)
 16 {
 17         ssize_t nread;
 18         char buffer[1024];
 19 
 20         atexit(exit);
 21 
 22         files = open("syd.txt", O_RDONLY);
 23         while((nread = read(files, buffer, 1024)) > 0)
 24         {
 25                 printf("%s", buffer);
 26         }
 27 
 28         return 0;
 29 }

-수행결과
: Hello
  Close files
