-연습문제 1번
-->문자열 형태의 인터넷 주소가 inet_addr 함수에 의해 바이너리 형태로 변환되었을 때 그 값이
   어떻게 되는지 직접 16진수와 10진수로 출력해 보시오.

-소스코드-
  1 #include <stdio.h>
  2 #include <arpa/inet.h>
  3 #include <unistd.h>
  4 int main(void)
  5 {
  6     char *address = "192.168.1.1";
  7     in_addr_t ipaddr;
  8     int ip_value, i, mask = 255;
  9 
 10     printf("in_addr_t의 사이즈 : %d\n", sizeof(in_addr_t));
 11     ipaddr = inet_addr(address);
 12 
 13     printf("int형의 사이즈 : %d\n", sizeof(int));
 14 
 15     for(i = 0; i < sizeof(int); i++)
 16     {
 17         ip_value = (ipaddr >> (i * 8)) & mask;
 18         printf("ipaddr : %d / 10진수 : %d / 16진수 :  %x\n ", ipaddr, ip_val    ue, ip_value);
 19     }
 20     return 0;
 21 }

-실행결과-
in_addr_t의 사이즈 : 4
int형의 사이즈 : 4
ipaddr : 16885952 / 10진수 : 192 / 16진수 :  c0
 ipaddr : 16885952 / 10진수 : 168 / 16진수 :  a8
 ipaddr : 16885952 / 10진수 : 1 / 16진수 :  1
 ipaddr : 16885952 / 10진수 : 1 / 16진수 :  1


-연습문제 2번
-->listen()함수의 backlog 값에 따른 연결 큐의 길이를 추정할 수 있는 프로그램을 작성하시오. 자신의
   시스템에서 backlog 값이 SOMAXCONN인 경우 최대 몇 개의 클라이언트가 연결을 성공할 수 있는지
   확인하시오.

-소스코드(server)-
  1 #include <stdio.h>
  2 #include <stdlib.h>
  3 #include <sys/types.h>
  4 #include <sys/socket.h>
  5 #include <netinet/in.h>
  6 #define SIZE sizeof(struct sockaddr_in)
  7 
  8 int main(int argc, char *argv[])
  9 {
 10     int sockfd_listen, sockfd_connect;
 11     int ret, backlog;
 12     struct sockaddr_in server = {AF_INET, 5000, INADDR_ANY};
 13     
 14     if(argc != 2)
 15     {
 16         printf("usage error!!\n");
 17         exit(1);
 18     }
 19 
 20     backlog = atoi(argv[1]);
 21     sockfd_listen = socket(AF_INET, SOCK_STREAM, 0);
 22     ret = bind(sockfd_listen, (struct sockaddr *)&server, SIZE);
 23 
 24     if(ret == -1)
 25     {
 26         printf("[server] error on bind!!\n");
 27     }
 28 
 29     printf("[server] listen\n");
 30     listen(sockfd_listen, backlog);
 31     sleep(10);
 32 
 33     while(1)
 34     {
 35         printf("[server] accept!\n");
 36         sockfd_connect = accept(sockfd_listen, NULL, NULL);
 37         printf("[server] accepted (%d)\n", sockfd_connect);
 38         //sleep(1);
 39         close(sockfd_connect);
 40         printf("[server] connection lost\n");
 41     }
 42 }

-소스코드(client)-
  1 #include <stdio.h>
  2 #include <stdlib.h>
  3 #include <sys/types.h>
  4 #include <sys/socket.h>
  5 #include <netinet/in.h>
  6 #define SIZE sizeof(struct sockaddr_in)
  7 #define NUM 64
  8 
  9 int main(int argc, char *argv[])
 10 {
 11     int sockfd, ret_val;
 12     struct sockaddr_in server = {AF_INET, 5000};
 13     pid_t pid[NUM];
 14     int np, limit;
 15 
 16     if(argc != 2)
 17     {
 18         printf("usage error\n");
 19         exit(1);
 20     }
 21 
 22     limit = atoi(argv[1]);
 23     for(np = 0; np < limit; np++)
 24     {
 25         pid[np] = fork();
 26         if(pid[np] == 0)
 27             break;
 28     }
 29 
 30     server.sin_addr.s_addr = inet_addr("127.0.0.1");
 31     printf("[client(%d,%d)] socket\n", np, getpid());
 32     sockfd = socket(AF_INET, SOCK_STREAM, 0);
 33 
 34     if(sockfd == -1)
 35         printf("[client(%d,%d)] fail to call socket()\n", np, getpid());
 36 
 37     printf("[client(%d,%d)] connect\n", np, getpid());
 38     ret_val = connect(sockfd, (struct sockaddr *)&server, SIZE);
 39     printf("[client(%d,%d)] ret_val is %d\n", np, getpid(), ret_val);
 40     if(ret_val == 0)
 41         close(sockfd);
 42 }

-실행결과-
./pt12-2-client 5000

[client(0,11969)] socket
[client(0,11969)] connect
[client(0,11969)] ret_val is 0
[client(1,11970)] socket
[client(1,11970)] connect
[client(1,11970)] ret_val is 0
[client(2,11971)] socket
[client(2,11971)] connect
[client(2,11971)] ret_val is 0
[client(15,11984)] socket
[client(15,11984)] connect
[client(15,11984)] ret_val is 0
[client(16,11985)] socket
[client(16,11985)] connect
[client(16,11985)] ret_val is 0
[client(17,11986)] socket
[client(17,11986)] connect
[client(17,11986)] ret_val is 0
[client(18,11987)] socket
[client(18,11987)] connect
[client(18,11987)] ret_val is 0
[client(20,11989)] socket
[client(20,11989)] connect
[client(20,11989)] ret_val is 0
[client(19,11988)] socket
[client(19,11988)] connect
[client(19,11988)] ret_val is 0
[client(21,11990)] socket
[client(21,11990)] connect
[client(21,11990)] ret_val is 0
[client(27,11996)] socket
[client(27,11996)] connect
[client(27,11996)] ret_val is 0
[client(28,11997)] socket
[client(28,11997)] connect
[client(28,11997)] ret_val is 0
[client(9,11978)] socket
[client(9,11978)] connect
[client(10,11979)] socket
[client(10,11979)] connect
[client(29,11998)] socket
[client(11,11980)] socket
[client(29,11998)] connect
[client(30,11999)] socket
[client(30,11999)] connect
[client(11,11980)] connect
[client(11,11980)] ret_val is 0
[client(32,12001)] socket
[client(29,11998)] ret_val is 0
[client(13,11982)] socket
[client(13,11982)] connect
[client(26,11995)] socket
[client(26,11995)] connect
[client(13,11982)] ret_val is 0
[client(9,11978)] ret_val is 0
[client(10,11979)] ret_val is 0
[client(32,12001)] connect
[client(32,12001)] ret_val is 0
[client(14,11983)] socket
[client(14,11983)] connect
[client(12,11981)] socket
[client(12,11981)] connect
[client(12,11981)] ret_val is 0
[client(36,12005)] socket
[client(36,12005)] connect
[client(8,11977)] socket
[client(8,11977)] connect
[client(23,11992)] socket
[client(23,11992)] connect
[client(8,11977)] ret_val is 0
[client(24,11993)] socket
[client(24,11993)] connect
[client(22,11991)] socket
[client(22,11991)] connect
[client(25,11994)] socket
[client(22,11991)] ret_val is 0
[client(42,12011)] socket
[client(42,12011)] connect
[client(42,12011)] ret_val is 0
[client(30,11999)] ret_val is 0
[client(25,11994)] connect
[client(25,11994)] ret_val is 0
[client(31,12000)] socket
[client(31,12000)] connect
[client(43,12012)] socket
[client(43,12012)] connect
[client(43,12012)] ret_val is 0
[client(31,12000)] ret_val is 0
[client(36,12005)] ret_val is 0
[client(38,12007)] socket
[client(38,12007)] connect
[client(38,12007)] ret_val is 0
[client(14,11983)] ret_val is 0
[client(40,12009)] socket
[client(40,12009)] connect
[client(23,11992)] ret_val is 0
[client(48,12017)] socket
[client(41,12010)] socket
[client(41,12010)] connect
[client(41,12010)] ret_val is 0
[client(24,11993)] ret_val is 0
[client(48,12017)] connect
[client(26,11995)] ret_val is 0
[client(40,12009)] ret_val is 0
[client(49,12018)] socket
[client(48,12017)] ret_val is 0
[client(34,12003)] socket
[client(34,12003)] connect
[client(50,12019)] socket
[client(50,12019)] connect
[client(49,12018)] connect
[client(50,12019)] ret_val is 0
[client(37,12006)] socket
[client(37,12006)] connect
[client(52,12021)] socket
[client(52,12021)] connect
[client(34,12003)] ret_val is 0
[client(52,12021)] ret_val is 0
[client(53,12022)] socket
[client(53,12022)] connect
[client(35,12004)] socket
[client(35,12004)] connect
[client(51,12020)] socket
[client(51,12020)] connect
[client(51,12020)] ret_val is 0
[client(35,12004)] ret_val is 0
[client(33,12002)] socket
[client(53,12022)] ret_val is 0
[client(33,12002)] connect
[client(33,12002)] ret_val is 0
[client(49,12018)] ret_val is 0
[client(4,11973)] socket
[client(4,11973)] connect
[client(4,11973)] ret_val is 0
[client(39,12008)] socket
[client(39,12008)] connect
[client(37,12006)] ret_val is 0
[client(5,11974)] socket
[client(5,11974)] connect
[client(5,11974)] ret_val is 0
[client(39,12008)] ret_val is 0
[client(44,12013)] socket
[client(6,11975)] socket
[client(6,11975)] connect
[client(6,11975)] ret_val is 0
[client(45,12014)] socket
[client(45,12014)] connect
[client(3,11972)] socket
[client(3,11972)] connect
[client(44,12013)] connect
[client(3,11972)] ret_val is 0
[client(44,12013)] ret_val is 0
[client(47,12016)] socket
[client(46,12015)] socket
[client(47,12016)] connect
[client(45,12014)] ret_val is 0
[client(47,12016)] ret_val is 0
[client(46,12015)] connect
[client(46,12015)] ret_val is 0
[client(55,12024)] socket
[client(54,12023)] socket
[client(54,12023)] connect
[client(54,12023)] ret_val is 0
[client(56,12025)] socket
[client(57,12026)] socket
[client(55,12024)] connect
[client(55,12024)] ret_val is 0
[client(57,12026)] connect
[client(56,12025)] connect
[client(56,12025)] ret_val is 0
[client(57,12026)] ret_val is 0
[client(7,11976)] socket
[client(7,11976)] connect
[client(66,12035)] socket
[client(66,12035)] connect
[client(67,12036)] socket
[client(67,12036)] connect
[client(67,12036)] ret_val is 0
[client(68,12037)] socket
[client(68,12037)] connect
[client(70,12039)] socket
[client(70,12039)] connect
[client(71,12040)] socket
[client(72,12041)] socket
[client(72,12041)] connect
[client(73,12042)] socket
[client(66,12035)] ret_val is 0
*** stack smashing detected[client(73,12042)] connect
[client(7,11976)] ret_val is 0
[client(68,12037)] ret_val is 0
*** [client(70,12039)] ret_val is 0
*** [client(71,12040)] connect
[client(94,12063)] socket
[client(94,12063)] connect
[client(72,12041)] ret_val is 0
[client(81,12050)] socket
[client(81,12050)] connect
[client(73,12042)] ret_val is 0
[client(79,12048)] socket
[client(79,12048)] connect
[client(71,12040)] ret_val is 0
*** *** stack smashing detected ***: ./pt12-2-clientstack smashing detected terminated
[client(64,12033)] socket
[client(64,12033)] connect
[client(63,12032)] socket
[client(63,12032)] connect
[client(63,12032)] ret_val is 0
[client(65,12034)] socket
[client(65,12034)] connect
[client(64,12033)] ret_val is 0
[client(65,12034)] ret_val is 0
[client(62,12031)] socket
[client(62,12031)] connect
[client(69,12038)] socket
[client(69,12038)] connect
[client(62,12031)] ret_val is 0
[client(83,12052)] socket
[client(83,12052)] connect
[client(83,12052)] ret_val is 0
*** stack smashing detected ***: ./pt12-2-client terminated
[client(69,12038)] ret_val is 0
*** stack smashing detected ***: ./pt12-2-client terminated
[client(61,12030)] socket
[client(61,12030)] connect
[client(61,12030)] ret_val is 0
[client(92,12061)] socket
[client(92,12061)] connect
[client(78,12047)] socket
[client(78,12047)] connect
[client(93,12062)] socket
[client(93,12062)] connect
[client(90,12059)] socket
[client(90,12059)] connect
[client(76,12045)] socket
[client(76,12045)] connect
[client(103,12074)] socket
[client(103,12074)] connect
[client(104,12075)] socket
[client(104,12075)] connect
[client(102,12073)] socket
[client(102,12073)] connect
[client(106,12077)] socket
[client(106,12077)] connect
[client(105,12076)] socket
[client(105,12076)] connect
[client(107,12078)] socket
[client(107,12078)] connect
[client(108,12079)] socket
[client(108,12079)] connect
[client(109,12080)] socket
[client(109,12080)] connect
[client(76,12045)] ret_val is 0
*** stack smashing detected ***: ./pt12-2-client terminated
[client(77,12046)] socket
[client(77,12046)] connect
[client(110,12081)] socket
[client(110,12081)] connect
[client(111,12082)] socket
[client(111,12082)] connect
[client(112,12083)] socket
[client(80,12049)] socket
[client(80,12049)] connect
[client(88,12057)] socket
[client(88,12057)] connect
[client(89,12058)] socket
[client(89,12058)] connect
[client(91,12060)] socket
[client(91,12060)] connect
[client(91,12060)] ret_val is 0
*** stack smashing detected ***: ./pt12-2-client terminated
[client(80,12049)] ret_val is 0
*** stack smashing detected ***: ./pt12-2-client terminated
[client(88,12057)] ret_val is 0
*** stack smashing detected ***: ./pt12-2-client terminated
[client(89,12058)] ret_val is 0
*** stack smashing detected ***: ./pt12-2-client terminated
[client(110,12081)] ret_val is 0
*** stack smashing detected ***: ./pt12-2-client terminated
[client(105,12076)] ret_val is 0
*** stack smashing detected ***: ./pt12-2-client terminated
[client(108,12079)] ret_val is 0
*** stack smashing detected ***: ./pt12-2-client terminated
[client(111,12082)] ret_val is 0
*** stack smashing detected ***: ./pt12-2-client terminated
[client(102,12073)] ret_val is 0
*** stack smashing detected ***: ./pt12-2-client terminated
[client(107,12078)] ret_val is 0
*** stack smashing detected ***: ./pt12-2-client terminated
[client(106,12077)] ret_val is 0
*** stack smashing detected ***: ./pt12-2-client terminated
[client(117,12095)] socket
[client(117,12095)] connect
[client(118,12096)] socket
[client(118,12096)] connect
[client(119,12097)] socket
[client(119,12097)] connect
[client(120,12098)] socket
[client(120,12098)] connect
[client(121,12099)] socket
[client(121,12099)] connect
[client(122,12100)] socket
[client(122,12100)] connect
[client(117,12095)] ret_val is 0
*** stack smashing detected ***: ./pt12-2-client terminated
[client(123,12101)] socket
[client(123,12101)] connect
[client(119,12097)] ret_val is 0
*** stack smashing detected ***: ./pt12-2-client terminated
[client(118,12096)] ret_val is 0
*** stack smashing detected ***: ./pt12-2-client terminated
[client(120,12098)] ret_val is 0
*** stack smashing detected ***: ./pt12-2-client terminated
[client(124,12102)] socket
[client(124,12102)] connect
[client(125,12103)] socket
[client(125,12103)] connect
[client(115,12086)] socket
[client(115,12086)] connect
[client(121,12099)] ret_val is 0
*** stack smashing detected ***: ./pt12-2-client terminated
[client(126,12104)] socket
[client(126,12104)] connect
[client(122,12100)] ret_val is 0
*** stack smashing detected ***: ./pt12-2-client terminated
[client(95,12064)] socket
[client(95,12064)] connect
[client(127,12105)] socket
[client(127,12105)] connect
[client(84,12053)] socket
[client(85,12054)] socket
[client(86,12055)] socket
[client(116,12094)] socket
[client(116,12094)] connect
[client(96,12065)] socket
[client(96,12065)] connect
[client(128,12106)] socket
[client(128,12106)] connect
[client(59,12028)] socket
[client(59,12028)] connect
[client(97,12066)] socket
[client(97,12066)] connect
[client(129,12107)] socket
[client(129,12107)] connect
[client(87,12056)] socket
[client(58,12027)] socket
[client(58,12027)] connect
[client(74,12043)] socket
[client(74,12043)] connect
[client(75,12044)] socket
[client(75,12044)] connect
[client(75,12044)] ret_val is 0
*** stack smashing detected ***: ./pt12-2-client terminated
[client(82,12051)] socket
[client(82,12051)] connect
[client(82,12051)] ret_val is 0
*** stack smashing detected ***: ./pt12-2-client terminated
[client(113,12084)] socket
[client(114,12085)] socket
[client(90,12059)] ret_val is 0
[client(77,12046)] ret_val is 0
*** [client(81,12050)] ret_val is 0
*** *** [client(78,12047)] ret_val is 0
[client(79,12048)] ret_val is 0
[client(94,12063)] ret_val is 0
*** stack smashing detected ***: ./pt12-2-client terminated
[client(114,12085)] connect
stack smashing detected ***: ./pt12-2-client terminated
[client(114,12085)] ret_val is 0
[client(60,12029)] socket
[client(103,12074)] ret_val is 0
[client(104,12075)] ret_val is 0
[client(93,12062)] ret_val is 0
*** [client(92,12061)] ret_val is 0
*** [client(109,12080)] ret_val is 0
*** stack smashing detected ***: ./pt12-2-client terminated
stack smashing detected ***: ./pt12-2-client terminated
[client(112,12083)] connect
*** stack smashing detected ***: [client(60,12029)] connect
[client(60,12029)] ret_val is 0
[client(123,12101)] ret_val is 0
*** stack smashing detected ***: ./pt12-2-client terminated
[client(85,12054)] connect
[client(85,12054)] ret_val is 0
*** stack smashing detected ***: ./pt12-2-client terminated
[client(98,12068)] socket
[client(124,12102)] ret_val is 0
*** stack smashing detected ***: ./pt12-2-client terminated
[client(99,12069)] socket
[client(130,12108)] socket
[client(115,12086)] ret_val is 0
*** stack smashing detected ***: ./pt12-2-client terminated
[client(130,12108)] connect
[client(100,12070)] socket
[client(101,12071)] socket
[client(101,12071)] connect
[client(131,12109)] socket
[client(126,12104)] ret_val is 0
[client(125,12103)] ret_val is 0
[client(96,12065)] ret_val is 0
*** *** [client(95,12064)] ret_val is 0
*** stack smashing detected ***: ./pt12-2-client[client(116,12094)] ret_val is 0
[client(127,12105)] ret_val is 0
stack smashing detected ***: ./pt12-2-client terminated
[client(128,12106)] ret_val is 0
[client(59,12028)] ret_val is 0
[client(97,12066)] ret_val is 0
*** [client(101,12071)] ret_val is 0
[client(129,12107)] ret_val is 0
*** stack smashing detected ***: ./pt12-2-client terminated
[client(86,12055)] connect
[client(86,12055)] ret_val is 0
*** stack smashing detected ***: ./pt12-2-client terminated
[client(84,12053)] connect
[client(84,12053)] ret_val is 0
*** stack smashing detected ***: ./pt12-2-client terminated
[client(58,12027)] ret_val is 0
[client(87,12056)] connect
[client(87,12056)] ret_val is 0
*** stack smashing detected ***: ./pt12-2-client terminated
[client(74,12043)] ret_val is 0
*** stack smashing detected ***: ./pt12-2-client terminated
[client(113,12084)] connect
[client(112,12083)] ret_val is 0
[client(100,12070)] connect
[client(99,12069)] connect
[client(98,12068)] connect
[client(131,12109)] connect
[client(130,12108)] ret_val is 0
*** [client(99,12069)] ret_val is 0
[client(100,12070)] ret_val is 0
[client(131,12109)] ret_val is 0
[client(98,12068)] ret_val is 0
[client(113,12084)] ret_val is 0
*** stack smashing detected ***: ./pt12-2-client terminated
*** stack smashing detected ***: ./pt12-2-client terminated
*** stack smashing detected ***: ./pt12-2-client terminated
stack smashing detected ***: ./pt12-2-client terminated


-연습문제 3번
-->[예제 12-10]은 한 글자씩 입력받아 전송하고 반환하는 과정으로 이루어져 있다. 이를 수정하여
   클라이언트가 '\n'을 입력할 때까지 입력을 받고, 이를 한꺼번에 전송하고 반환하도록 작성하시오.

-소스코드(server)-
  1 #include <stdio.h>
  2 #include <stdlib.h>
  3 #include <sys/types.h>
  4 #include <sys/socket.h>
  5 #include <netinet/in.h>
  6 #include <signal.h>
  7 #define SIZE sizeof(struct sockaddr_in)
  8 #define MSGLEN 1024
  9 
 10 void closesock(int sig);
 11 int sockfd_connect;
 12 
 13 int main(void)
 14 {
 15     int sockfd_listen, nread;
 16     char msg[MSGLEN];
 17     struct sockaddr_in server = {AF_INET, 5000, INADDR_ANY};
 18     struct sigaction act;
 19 
 20     act.sa_handler = closesock;
 21     sigfillset(&(act.sa_mask));
 22     sigaction(SIGPIPE, &act, NULL);
 23 
 24     if((sockfd_listen = socket(AF_INET, SOCK_STREAM, 0)) == -1)
 25     {
 26         printf("fail to call socket()\n");
 27         exit(1);
 28     }
 29     if(bind(sockfd_listen, (struct sockaddr *)&server, SIZE) == -1)
 30     {
 31         printf("fail to call bind()\n");
 32         exit(1);
 33     }
 34     if(listen(sockfd_listen, 5) == -1)
 35     {
 36         printf("fail to call listen()\n");
 37         exit(1);
 38     }
 39 
 40     while(1)
 41     {
 42         if((sockfd_connect = accept(sockfd_listen, NULL, NULL)) == -1)
 43         {
 44             printf("fail to call accept()\n");
 45             continue;
 46         }
 47         printf("accepted\n");
 48         while((nread = recv(sockfd_connect, msg, MSGLEN, 0)) > 0)
 49             send(sockfd_connect, msg, nread, 0);
 50         printf("close(sockfd_connect)\n");
 51         close(sockfd_connect);
 52     }
 53     return 0;
 54 }
 55 
 56 void closesock(int sig)
 57 {
 58     close(sockfd_connect);
 59     printf("connection is lost\n");
 60     exit(0);
 61 }

-소스코드(client)-
  1 #include <stdio.h>
  2 #include <stdlib.h>
  3 #include <string.h>
  4 #include <ctype.h>
  5 #include <sys/types.h>
  6 #include <sys/socket.h>
  7 #include <netinet/in.h>
  8 #define SIZE sizeof(struct sockaddr_in)
  9 #define MSGLEN 1024
 10 
 11 int main(void)
 12 {
 13     int sockfd, nread;
 14     char send_c[1024], recv_c[1024];
 15     struct sockaddr_in server = {AF_INET, 5000};
 16     server.sin_addr.s_addr = inet_addr("127.0.0.1");
 17 
 18     if((sockfd = socket(AF_INET, SOCK_STREAM, 0)) == -1)
 19     {
 20         printf("fail to call socket()\n");
 21         exit(1);
 22     }
 23 
 24     if(connect(sockfd, (struct sockaddr *)&server, SIZE) == -1)
 25     {
 26         printf("fail to call connect()\n");
 27         exit(1);
 28     }
 29     recv_c[0] = '\0';
 30 
 31     while(1)
 32     {
 33         if(strlen(recv_c) == 0)
 34             printf("Input a message\n");
 35         fgets(send_c, MSGLEN, stdin);
 36         send(sockfd, send_c, strlen(send_c), 0);
 37         if((nread = recv(sockfd, recv_c, MSGLEN, 0)) > 0)
 38         {
 39             printf("%s\n", recv_c);
 40         }
 41         else
 42         {
 43             printf("server has no reply\n");
 44             close(sockfd);
 45             exit(1);
 46         }
 47     }
 48     return 0;
 49 }

-실행결과-
./pt12-3-client 5000
Input a message
Hello World\n
Hello World\n
